knitr::opts_chunk$set(echo = TRUE)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(1234)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1)
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1)
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
confusionMatrix(bag_preds, test$Target)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(1234)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1)
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
confusionMatrix(bag_preds, test$Target)
p <- ncol(train) - 1
rf_mod <- randomForest(Target ~ ., data = train, mtry = floor(p/2),
importance = TRUE)
varImpPlot(rf_mod)
rf_preds <- predict(rf_mod, newdata = test, type = 'class')
confusionMatrix(rf_preds, test$Target)
library(glmnet)
cv_model <- cv.glmnet(x = as.matrix(train[, -37]),
y = train$Target,
family = "multinomial")
best_lambda <- cv_model$lambda.1se
logit_preds <- predict(cv_model,
newx = as.matrix(test[, -37]),
type = "class",
s = best_lambda)
confusionMatrix(as.factor(as.vector(logit_preds)), test$Target)
train$DropoutBinary <- ifelse(train$Target == "Dropout", "Dropout", "NotDropout")
test$DropoutBinary  <- ifelse(test$Target == "Dropout", "Dropout", "NotDropout")
train$DropoutBinary <- ifelse(train$Target == "Dropout", "Dropout", "NotDropout")
test$DropoutBinary  <- ifelse(test$Target == "Dropout", "Dropout", "NotDropout")
p <- ncol(train) - 2
rf_mod_all <- randomForest(DropoutBinary ~ ., data = train[,-37], mtry = floor(p/2),
importance = TRUE)
train$DropoutBinary <- ifelse(train$Target == "Dropout", "Dropout", "NotDropout")
test$DropoutBinary  <- ifelse(test$Target == "Dropout", "Dropout", "NotDropout")
train$DropoutBinary <- ifelse(train$Target == "Dropout", "Dropout", "NotDropout")
test$DropoutBinary  <- ifelse(test$Target == "Dropout", "Dropout", "NotDropout")
train$DropoutBinary <- as.factor(train$DropoutBinary)
test$DropoutBinary <- as.factor(test$DropoutBinary)
p <- ncol(train) - 2
rf_mod_all <- randomForest(DropoutBinary ~ ., data = train[,-37],
mtry = floor(p/2),
importance = TRUE)
varImpPlot(rf_mod_all)
rf_preds_all <- predict(rf_mod_all, newdata = test, type = 'class')
confusionMatrix(rf_preds_all, test$DropoutBinary)
View(train)
cv_model_all <- cv.glmnet(x = as.matrix(train[, -37:38]),
y = train$DropoutBinary,
family = "binomial")
cv_model_all <- cv.glmnet(x = as.matrix(train[, -c(37:38)]),
y = train$DropoutBinary,
family = "binomial")
best_lambda <- cv_model_all$lambda.1se
logit_preds_all <- predict(cv_model_all,
newx = as.matrix(test[, -c(37:38)]),
type = "class",
s = best_lambda)
confusionMatrix(as.factor(as.vector(logit_preds_all)), test$DropoutBinary)
cv_model_all <- cv.glmnet(x = as.matrix(train[, -c(37:38)]),
y = train$DropoutBinary,
family = "binomial")
best_lambda <- cv_model_all$lambda.min
logit_preds_all <- predict(cv_model_all,
newx = as.matrix(test[, -c(37:38)]),
type = "class",
s = best_lambda)
confusionMatrix(as.factor(as.vector(logit_preds_all)), test$DropoutBinary)
cv_model_all <- cv.glmnet(x = as.matrix(train[, -c(37:38)]),
y = train$DropoutBinary,
family = "binomial")
best_lambda <- cv_model_all$lambda.1se
logit_preds_all <- predict(cv_model_all,
newx = as.matrix(test[, -c(37:38)]),
type = "class",
s = best_lambda)
confusionMatrix(as.factor(as.vector(logit_preds_all)), test$DropoutBinary)
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(DropoutBinary ~ . -Target , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
confusionMatrix(tree_preds, test$DropoutBinary)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$DropoutBinary)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
plot(rf_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
control <- trainControl(method = "cv", number = 5)  # 5-fold CV
# Try a few mtry values
tunegrid <- expand.grid(.mtry = c(floor(sqrt(p)), floor(p/3), floor(p/2)))
rf_tune <- train(Target ~ .,
data = train,
method = "rf",
tuneGrid = tunegrid,
trControl = control,
ntree = 200)  # fewer trees!
print(rf_tune)
plot(rf_tune)
rf_mod <- randomForest(Target ~ ., data = train, mtry = floor(p/2),
importance = TRUE, ntree = 200)
rf_preds <- predict(rf_mod, newdata = test, type = 'class')
confusionMatrix(rf_preds, test$Target)
rf_mod <- randomForest(Target ~ ., data = train, mtry = floor(p/2),
importance = TRUE, ntree = 200)
plot(rf_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
rf_mod <- randomForest(Target ~ ., data = train, mtry = floor(p/2),
importance = TRUE, ntree = 100)
varImpPlot(rf_mod)
rf_preds <- predict(rf_mod, newdata = test, type = 'class')
confusionMatrix(rf_preds, test$Target)
p <- ncol(train) - 2
rf_mod_all <- randomForest(DropoutBinary ~ ., data = train[,-37],
mtry = floor(p/2),
importance = TRUE,
ntree = 100)
rf_preds_all <- predict(rf_mod_all, newdata = test, type = 'class')
confusionMatrix(rf_preds_all, test$DropoutBinary)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 100)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 50)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 50)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 50)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 50)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 50)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 50)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 100)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 100)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 100)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 200)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 200)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 200)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1,
ntree = 500)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 500)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 500)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 500)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 500)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train[,-38],
mtry = ncol(train) - 1)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 500)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 500)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train[,-38],
mtry = ncol(train) - 2)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class', ntree = 500)
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class', ntree = 500)
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train[,-38],
mtry = ncol(train) - 2)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class')
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
knitr::opts_chunk$set(echo = TRUE)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(1234)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(DropoutBinary ~ . -Target , data = train, method = 'class')
knitr::opts_chunk$set(echo = TRUE)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(1234)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
# library(rpart)
# library(rpart.plot)
# library(caret)
#
# dat_rpart <- rpart(DropoutBinary ~ . -Target , data = train, method = 'class')
# tree_preds <- predict(dat_rpart, newdata = test, type = "class")
#
# confusionMatrix(tree_preds, test$DropoutBinary)
#
# plotcp(dat_rpart)
# dat_rpart$cptable
#
# dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
# dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
#
# tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
#
# confusionMatrix(tree_preds_pruned, test$DropoutBinary)
#
# rpart.plot(dat_rpart)
# rpart.plot(dat_pruned)
library(randomForest)
bagged_mod <- randomForest(Target ~ ., data = train,
mtry = ncol(train) - 1)
plot(bagged_mod$err.rate[,1], type = 'l', ylab = "OOB Error", xlab = "Number of Trees")
bag_preds <- predict(bagged_mod, newdata = test, type = 'class')
bag_train_preds <- predict(bagged_mod, newdata = train, type = 'class')
confusionMatrix(bag_train_preds, train$Target)
confusionMatrix(bag_preds, test$Target)
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
tree_train <- predict(dat_rpart, newdata = train, type = 'class')
confusionMatrix(tree_train, train$Target)
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(1234)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
tree_train <- predict(dat_rpart, newdata = train, type = 'class')
confusionMatrix(tree_train, train$Target)
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
tree_train <- predict(dat_rpart, newdata = train, type = 'class')
confusionMatrix(tree_train, train$Target)
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(7)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
tree_train <- predict(dat_rpart, newdata = train, type = 'class')
confusionMatrix(tree_train, train$Target)
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
grad_data <- read.csv("data.csv", sep = ";")
grad_data$Target <- as.factor(grad_data$Target)
set.seed(1234)
ind = sample(1:nrow(grad_data), size = (nrow(grad_data) * 0.8), replace = FALSE)
train = grad_data[ind, ]
test = grad_data[-ind, ]
library(rpart)
library(rpart.plot)
library(caret)
dat_rpart <- rpart(Target ~ . , data = train, method = 'class')
tree_preds <- predict(dat_rpart, newdata = test, type = "class")
tree_train <- predict(dat_rpart, newdata = train, type = 'class')
confusionMatrix(tree_train, train$Target)
confusionMatrix(tree_preds, test$Target)
plotcp(dat_rpart)
dat_rpart$cptable
dat_min_cp = dat_rpart$cptable[which.min(dat_rpart$cptable[,"xerror"]),"CP"]
dat_pruned <- prune(dat_rpart, cp = dat_min_cp)
tree_preds_pruned <- predict(dat_pruned, newdata = test, type = "class")
confusionMatrix(tree_preds_pruned, test$Target)
rpart.plot(dat_rpart)
rpart.plot(dat_pruned)
library(glmnet)
cv_model <- cv.glmnet(x = as.matrix(train[, -37]),
y = train$Target,
family = "multinomial")
best_lambda <- cv_model$lambda.1se
logit_preds <- predict(cv_model,
newx = as.matrix(test[, -37]),
type = "class",
s = best_lambda)
logit_train <- predict(cv_model,
newx = as.matrix(train[,-37]),
type = 'class',
s = best_lambda)
confusionMatrix(as.factor(as.vector(logit_train)), train$Target)
#confusionMatrix(as.factor(as.vector(logit_preds)), test$Target)
